<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YeloDebug</name>
    </assembly>
    <members>
        <member name="T:YeloDebug.Exceptions.ApiException">
            <summary>
            Thrown when an YeloDebug API function fails
            </summary>
        </member>
        <member name="T:YeloDebug.Exceptions.NoConnectionException">
            <summary>
            Represents errors that occur when there is no debug connection detected between the xbox and pc.
            </summary>
        </member>
        <member name="T:YeloDebug.Exceptions.ScriptTimeoutException">
            <summary>
            Represents errors that occur when a script becomes unresponsive.
            </summary>
        </member>
        <member name="T:YeloDebug.Exceptions.XboxDebugException">
            <summary>
            Represents errors that occur within the xbox debugging interface.
            </summary>
        </member>
        <member name="T:YeloDebug.Exceptions.UnsupportedException">
            <summary>
            Represents errors that occur when an unsupported method is called.
            </summary>
        </member>
        <member name="T:YeloDebug.Exceptions.MemoryAllocationException">
            <summary>
            Represents errors that occur when an xbox memory allocation fails.
            </summary>
        </member>
        <member name="T:YeloDebug.Exceptions.HistoryCorruptionException">
            <summary>
            Represents errors that occur when a corruption is detected in our history pages.
            </summary>
        </member>
        <member name="T:YeloDebug.Util">
            <summary>
            Miscellaneous helper functions.
            </summary>
        </member>
        <member name="M:YeloDebug.Util.TimeStampToLocalDateTime(System.UInt32)">
            <summary>
            Converts a timestamp to its local DateTime equivalent.
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Util.TimeStampToUniversalDateTime(System.UInt32)">
            <summary>
            Converts a timestamp to its universal DateTime equivalent.
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Util.BuildScript(System.String,System.Object[])">
            <summary>
            Provides an easy way to modify and inject custom assembly scripts.
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:YeloDebug.LinkStatus">
            <summary>
            Ethernet link status.
            </summary>
        </member>
        <member name="F:YeloDebug.LinkStatus.Active">
            <summary>
            Ethernet cable is connected and active.
            </summary>
        </member>
        <member name="F:YeloDebug.LinkStatus.Speed100MBPS">
            <summary>
            Ethernet link is set to 100 Mbps.
            </summary>
        </member>
        <member name="F:YeloDebug.LinkStatus.Speed10MBPS">
            <summary>
            Ethernet link is set to 10Mbps.
            </summary>
        </member>
        <member name="F:YeloDebug.LinkStatus.FullDuplex">
            <summary>
            Ethernet link is in full duplex mode.
            </summary>
        </member>
        <member name="F:YeloDebug.LinkStatus.HalfDuplex">
            <summary>
            Ethernet link is in half duplex mode.
            </summary>
        </member>
        <member name="F:YeloDebug.StopOnFlags.CreateThread">
            <summary>
            Suspend title execution when a thread is created.
            </summary>
        </member>
        <member name="F:YeloDebug.StopOnFlags.FCE">
            <summary>
            Suspend title execution when a first-chance exception occurs.
            </summary>
        </member>
        <member name="F:YeloDebug.StopOnFlags.DebugStr">
            <summary>
            Suspend title execution when a string is sent to debug out.
            </summary>
        </member>
        <member name="F:YeloDebug.BreakpointType.None">
            <summary>
            Clear this data breakpoint.
            </summary>
        </member>
        <member name="F:YeloDebug.BreakpointType.Write">
            <summary>
            Break if the address is written to.
            </summary>
        </member>
        <member name="F:YeloDebug.BreakpointType.ReadWrite">
            <summary>
            Break if the address is read from or written to.
            </summary>
        </member>
        <member name="F:YeloDebug.BreakpointType.Execute">
            <summary>
            Break if the address is executed.
            </summary>
        </member>
        <member name="T:YeloDebug.BootFlag">
            <summary>
            Xbox boot type.
            </summary>
        </member>
        <member name="F:YeloDebug.BootFlag.Wait">
            <summary>
            When the reboot is complete, the system software will wait 15 
            seconds before launching the default title. If you call DmGo 
            during this time, the system software will launch the title immediately.
            </summary>
        </member>
        <member name="F:YeloDebug.BootFlag.Warm">
            <summary>
            Perform a "warm" reboot of the console.
            </summary>
        </member>
        <member name="F:YeloDebug.BootFlag.NoDebug">
            <summary>
            Prevent debugging after reboot. The Xbox debug manager will not be 
            loaded on any subsequent warm reboot; a cold boot is required.
            </summary>
        </member>
        <member name="F:YeloDebug.BootFlag.Stop">
            <summary>
            When the reboot is complete, the system software will wait 
            (with no timeout) before launching the default title. Calling 
            DmGo while the system is waiting will launch the title.
            </summary>
        </member>
        <member name="F:YeloDebug.BootFlag.Cold">
            <summary>
            Complete shut-down of the system before rebooting.
            </summary>
        </member>
        <member name="F:YeloDebug.BootFlag.Current">
            <summary>
            Warm reboot to active title.
            </summary>
        </member>
        <member name="T:YeloDebug.VideoStandard">
            <summary>
            Xbox video standard.
            </summary>
        </member>
        <member name="T:YeloDebug.VideoFlags">
            <summary>
            Xbox video flags.
            </summary>
        </member>
        <member name="T:YeloDebug.AllocationType">
            <summary>
            Xbox memory allocation type.
            </summary>
        </member>
        <member name="T:YeloDebug.MEMORY_FLAGS">
            <summary>
            Xbox memory flags.
            </summary>
        </member>
        <member name="T:YeloDebug.LEDState">
            <summary>
            Represents one of the 4 possible Xbox LED states.
            </summary>
        </member>
        <member name="T:YeloDebug.Buttons">
            <summary>
            Xbox gamepad buttons.
            </summary>
        </member>
        <member name="T:YeloDebug.AnalogButtons">
            <summary>
            Xbox analog gamepad buttons.
            </summary>
        </member>
        <member name="T:YeloDebug.ResponseType">
            <summary>
            Xbox response type.
            </summary>
        </member>
        <member name="T:YeloDebug.WaitType">
            <summary>
            Receive wait type.
            </summary>
        </member>
        <member name="F:YeloDebug.WaitType.None">
            <summary>
            Does not wait.
            </summary>
        </member>
        <member name="F:YeloDebug.WaitType.Partial">
            <summary>
            Waits until some data starts being received.
            </summary>
        </member>
        <member name="F:YeloDebug.WaitType.Full">
            <summary>
            Waits until all data has been received. Use only with continuous flows of data, never file IO.
            </summary>
        </member>
        <member name="T:YeloDebug.DumpFlags">
            <summary>
            Items to include in a memdump.
            </summary>
        </member>
        <member name="F:YeloDebug.DumpFlags.Code">
            <summary>
            Xbe code segment.
            </summary>
        </member>
        <member name="F:YeloDebug.DumpFlags.Data">
            <summary>
            Xbe data segment.
            </summary>
        </member>
        <member name="F:YeloDebug.DumpFlags.System">
            <summary>
            System pages. (kernel, stacks, pools, etc...)
            </summary>
        </member>
        <member name="F:YeloDebug.DumpFlags.Debug">
            <summary>
            Debugger pages.
            </summary>
        </member>
        <member name="T:YeloDebug.SMBusDevices">
            <summary>
            Devices on the SMBus
            </summary>
        </member>
        <member name="T:YeloDebug.PICCommand">
            <summary>
            Commands that can be sent to the PIC.
            </summary>
        </member>
        <member name="T:YeloDebug.VideoEncoderCommand">
            <summary>
            Commands that can be sent to the video encoder.
            </summary>
        </member>
        <member name="T:YeloDebug.VideoEncoder">
            <summary>
            Values for the video encoder.
            </summary>
        </member>
        <member name="T:YeloDebug.PowerSubCommand">
            <summary>
            Sub-commands for the PIC power command.
            </summary>
        </member>
        <member name="T:YeloDebug.LEDSubCommand">
            <summary>
            Sub-commands for the PIC led command.
            </summary>
        </member>
        <member name="T:YeloDebug.EjectSubCommand">
            <summary>
            Sub-commands for the PIC eject command.
            </summary>
        </member>
        <member name="T:YeloDebug.TrayState">
            <summary>
            Xbox tray state.
            </summary>
        </member>
        <member name="F:YeloDebug.TrayState.Busy">
            <summary>
            Drive is not ready.
            </summary>
        </member>
        <member name="F:YeloDebug.TrayState.Open">
            <summary>
            Tray is open.
            </summary>
        </member>
        <member name="F:YeloDebug.TrayState.Disc">
            <summary>
            Media disk present in tray.
            </summary>
        </member>
        <member name="F:YeloDebug.TrayState.Closed">
            <summary>
            Tray is closed.
            </summary>
        </member>
        <member name="F:YeloDebug.TrayState.None">
            <summary>
            No optical drive detected.
            </summary>
        </member>
        <member name="T:YeloDebug.ResetOnEjectSubCommand">
            <summary>
            Sub-commands for reset on eject PIC command.
            </summary>
        </member>
        <member name="T:YeloDebug.ScratchRegisterValue">
            <summary>
            Scratch register values.
            </summary>
        </member>
        <member name="T:YeloDebug.Device">
            <summary>
            Xbox device.
            </summary>
        </member>
        <member name="T:YeloDebug.Drive">
            <summary>
            Xbox drive name.
            </summary>
        </member>
        <member name="T:YeloDebug.ModuleInfo">
            <summary>
            Module information.
            </summary>
        </member>
        <member name="F:YeloDebug.ModuleInfo.Name">
            <summary>
            Name of the module that was loaded.
            </summary>
        </member>
        <member name="F:YeloDebug.ModuleInfo.BaseAddress">
            <summary>
            Address that the module was loaded to.
            </summary>
        </member>
        <member name="F:YeloDebug.ModuleInfo.Size">
            <summary>
            Size of the module.
            </summary>
        </member>
        <member name="F:YeloDebug.ModuleInfo.TimeStamp">
            <summary>
            Time stamp of the module.
            </summary>
        </member>
        <member name="F:YeloDebug.ModuleInfo.Checksum">
            <summary>
            Checksum of the module.
            </summary>
        </member>
        <member name="F:YeloDebug.ModuleInfo.Sections">
            <summary>
            Sections contained within the module.
            </summary>
        </member>
        <member name="T:YeloDebug.ModuleSection">
            <summary>
            Module section information.
            </summary>
        </member>
        <member name="T:YeloDebug.XbeInfo">
            <summary>
            Structure that contains information about the XBE.
            </summary>
        </member>
        <member name="T:YeloDebug.FileInformation">
            <summary>
            Xbox file information.
            </summary>
        </member>
        <member name="T:YeloDebug.MemoryStatistics">
            <summary>
            Xbox memory statistics.
            </summary>
        </member>
        <member name="T:YeloDebug.MemoryRegion">
            <summary>
            Xbox memory region.
            </summary>
        </member>
        <member name="T:YeloDebug.AddressRange">
            <summary>
            Xbox memory address range.
            </summary>
        </member>
        <member name="M:YeloDebug.AddressRange.#ctor">
            <summary>
            Specifies a default range of all addresses.
            </summary>
        </member>
        <member name="M:YeloDebug.AddressRange.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Specifies a custom address range.
            </summary>
            <param name="low"></param>
            <param name="high"></param>
        </member>
        <member name="T:YeloDebug.AllocationEntry">
            <summary>
            Xbox memory allocation entry.
            </summary>
        </member>
        <member name="T:YeloDebug.MEMORY_BASIC_INFORMATION">
            <summary>
            Basic xbox memory information.
            </summary>
        </member>
        <member name="T:YeloDebug.CPUContext">
            <summary>
            Cpu general purpose register context.  Only the registers you change will be set before the call.
            </summary>
        </member>
        <member name="T:YeloDebug.InputState">
            <summary>
            Xbox gamepad input state.
            </summary>
        </member>
        <member name="T:YeloDebug.StatusResponse">
            <summary>
            Xbox command status response.
            </summary>
        </member>
        <member name="T:YeloDebug.DebugConnection">
            <summary>
            Xbox debug connection information.
            </summary>
        </member>
        <member name="T:YeloDebug.Xbox">
            <summary>
            Xbox debug connection.
            </summary> 
        </member>
        <member name="F:YeloDebug.Xbox.xdkRegistryPath">
            <summary>
            Registry entry to store the last connection used.
            </summary>
        </member>
        <member name="F:YeloDebug.Xbox.connections">
            <summary>
            Keeps a list of available connections
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.Connection">
            <summary>
            Gets the main connection used for pc to xbox communication.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.Kernel">
            <summary>
            Gets the xbox kernel information.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.Timeout">
            <summary>
            Gets or sets the maximum waiting time given (in milliseconds) for a response.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.Connected">
            <summary>
            Gets the current connection status known to YeloDebug.  For an actual status update you need to Ping() the xbox.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.DebugIP">
            <summary>
            Gets the xbox debug ip address.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.DebugName">
            <summary>
            Gets the xbox debug name.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.EnableNotificationSession">
            <summary>
            Gets or sets whether or not the notification session will be enabled.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.NotificationListener">
            <summary>
            Gets the notification listener registered with the xbox that listens for incoming notification session requests.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.NotificationSession">
            <summary>
            Gets the current notification session registered with the xbox.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.NotificationPort">
            <summary>
            Gets or sets the xbox notification port.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.Notifications">
            <summary>
            Gets or sets the list of notifications.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.TitleIP">
            <summary>
            Gets the xbox game ip address.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.ProcessID">
            <summary>
            Gets the xbox process id.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.Modules">
            <summary>
            Gets a list of modules loaded by the xbox.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.XbeInfo">
            <summary>
            Gets xbox executable information.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.DebugMonitorVersion">
            <summary>
            Gets the xbox debug monitor version.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.KernelVersion">
            <summary>
            Gets the xbox kernel version.  Note that non-debug kernel build versions are substituted with the build year instead.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.HardDriveKey">
            <summary>
            Gets the xbox hard drive key.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.EEPROMKey">
            <summary>
            Gets the xbox EEPROM key.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.SignatureKey">
            <summary>
            Gets the xbox signature key.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.LanKey">
            <summary>
            Gets the xbox lan key.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.AlternateSignatureKeys">
            <summary>
            Gets the alternate xbox signature keys.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.HardDriveSerial">
            <summary>
            Gets the xbox hard drive serial number.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.HardDriveModel">
            <summary>
            Gets the xbox hard drive model.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.SerialNumber">
            <summary>
            Gets the xbox serial number.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.MacAddress">
            <summary>
            Gets the xbox mac address.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.Version">
            <summary>
            Gets the xbox version.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.HardwareInfo">
            <summary>
            Gets the xbox hardware info.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.VideoEncoderType">
            <summary>
            Gets the video encoder type installed on the xbox.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.CPUFrequency">
            <summary>
            Gets the xbox processor frequency.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.ProcessorInformation">
            <summary>
            Gets the xbox processor information.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.LinkStatus">
            <summary>
            Gets the current xbox ethernet link status.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.EEPROM">
            <summary>
            Gets the xbox EEPROM.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.LastConnectionUsed">
            <summary>
            Gets or sets the last xbox connection used.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.ProductionInfo">
            <summary>
            Gets the xbox manufacturer production information.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.AVPack">
            <summary>
            Gets the current AV-Pack status.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.SystemTime">
            <summary>
            Gets or sets the xbox system time.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.TimePoweredOn">
            <summary>
            Gets the amount of time the xbox has been powered on for or the time since its last cold boot.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.MemoryStatistics">
            <summary>
            Gets the xbox memory statistics.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.CommittedMemory">
            <summary>
            Gets a list of valid xbox memory segments.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.Threads">
            <summary>
            Gets a list of xbox threads.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.CPUTemperature">
            <summary>
            Gets the xbox CPU temperature in degrees celsius.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.GPUTemperature">
            <summary>
            Gets the xbox GPU temperature in degrees celsius.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.FanSpeed">
            <summary>
            Gets or sets the xbox fan speed percentage.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.#ctor">
            <summary>
            Xbox connection.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.QueryXboxConnections">
            <summary>
            Returns a list containing all consoles detected on the network.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox._connect">
            <summary>
            Shared connection function
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.Connect">
            <summary>
            Connects to an xbox on the network. If multiple consoles are detected this method 
            will attempt to connect to the last connection used. If that connection or information
            is unavailable this method will fail.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.Connect(System.String)">
            <summary>
            Connects to a specified xbox using the box name.
            </summary>
            <param name="debugInfo">Case insensitive information may either be a debug ip or the name of a specific xbox.</param>
        </member>
        <member name="M:YeloDebug.Xbox.ConnectToIP(System.String)">
            <summary>
            Connects to an xbox using the IP address
            </summary>
            <param name="ip"></param>
        </member>
        <member name="M:YeloDebug.Xbox.RegisterNotificationSession(System.Int32)">
            <summary>
            Registers a notification session on the specified port.
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:YeloDebug.Xbox.Disconnect">
            <summary>
            Disconnects from the xbox.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.Reconnect(System.Int32)">
            <summary>
            Attempts to re-establish a connection with the currently selected xbox console.
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:YeloDebug.Xbox.Reconnect">
            <summary>
            Re-establishes a connection with the currently selected xbox console.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.ConnectionCheck">
            <summary>
            Checks the connection status between xbox and pc.
            This function only checks what YeloDebug believes to be the current connection status.
            For a true status check you will need to ping the xbox regularly.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.Ping(System.Int32)">
            <summary>
            Retrieves xbox connection status. Average execution time of 2200 executions per second, or one every half millisecond.
            </summary>
            <param name="waitTime">Time to wait for a response</param>
            <returns>Connection status</returns>
        </member>
        <member name="M:YeloDebug.Xbox.Ping">
            <summary>
            Retrieves xbox connection status. Average execution time of 2200 executions per second, or one every half millisecond.
            </summary>
            <returns>Connection status</returns>
        </member>
        <member name="M:YeloDebug.Xbox.Reboot(YeloDebug.BootFlag)">
            <summary>
            Reboots the xbox with the specified BootFlag.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:YeloDebug.Xbox.Reboot">
            <summary>
            Performs a warm reboot on the xbox.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.LaunchTitle(System.String)">
            <summary>
            Launches the specified xbox title and attempts to establish a new connection with that title.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:YeloDebug.Xbox.GetXboxInformation">
            <summary>
            Reads all static xbox information that will remain constant throughout a session.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.FlushSocketBuffer">
            <summary>
            Clear everything from the receive buffer.
            Call this before you send anything to the xbox to help keep the channel in sync.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.FlushSocketBuffer(System.Int32)">
            <summary>
            Clear a specified amount from the receive buffer.
            If amount in buffer is less than requested size, everything will be cleared.
            </summary>
            <param name="size">Size to flush</param>
        </member>
        <member name="M:YeloDebug.Xbox.Wait(YeloDebug.WaitType)">
            <summary>
            Waits for data to be received.  During execution this method will enter a spin-wait loop and appear to use 100% cpu when in fact it is just a suspended thread.  
            This is much more efficient than waiting a millisecond since most commands take fractions of a millisecond.
            It will either resume after the condition is met or throw a timeout exception.
            </summary>
            <param name="type">Wait type</param>
        </member>
        <member name="M:YeloDebug.Xbox.Wait(System.Int32)">
            <summary>
            Waits for a specified amount of data to be received.  Use with file IO.
            </summary>
            <param name="targetLength">Amount of data to wait for</param>
        </member>
        <member name="M:YeloDebug.Xbox.ReceiveSocketLine">
            <summary>
            Receives a line of text from the xbox.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.ReceiveMultilineResponse">
            <summary>
            Receives multiple lines of text from the xbox.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.ReceiveNotification">
            <summary>
            Receives a notification if one is present.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.ReceiveNotifications">
            <summary>
            Receives any notifications that may be present.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.ReceiveStatusResponse">
            <summary>
            Waits for a status response to be received from the xbox.
            </summary>
            <returns>Status response</returns>
        </member>
        <member name="M:YeloDebug.Xbox.SendCommand(System.String,System.Object[])">
            <summary>
            Sends a command to the xbox.
            </summary>
            <param name="command">Command to be sent</param>
            <param name="args">Arguments</param>
            <returns>Status response</returns>
        </member>
        <member name="M:YeloDebug.Xbox.SendBinaryData(System.Byte[])">
            <summary>
            Sends binary data to the xbox.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:YeloDebug.Xbox.SendBinaryData(System.Byte[],System.Int32)">
            <summary>
            Sends binary data of specified length to the xbox.
            </summary>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="M:YeloDebug.Xbox.ReceiveBinaryData">
            <summary>
            Receives all available binary data sent from the xbox.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.ReceiveBinaryData(System.Int32)">
            <summary>
            Receives binary data of specified size sent from the xbox.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.ReceiveBinaryData(System.Byte[]@)">
            <summary>
            Receives binary data of specified size sent from the xbox.
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:YeloDebug.Xbox.FileStream">
            <summary>
            Creates a standard xbox file stream.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.FileStream.#ctor(YeloDebug.Xbox,System.String,System.IO.FileMode)">
            <summary>
            Creates a new file stream using a client connection to a debug xbox.
            </summary>
            <param name="client">Connection to use.</param>
            <param name="fileName">Name of the file to expose stream to.</param>
            <param name="mode">File create disposition.</param>
        </member>
        <member name="M:YeloDebug.Xbox.ReadFilePartial(System.String,System.Int32,System.Byte[]@,System.Int32,System.Int32@)">
            <summary>
            Dont use this, higher-level methods are available.  Use FileStream instead.
            </summary>
            <param name="name"></param>
            <param name="offset"></param>
            <param name="buffer"></param>
            <param name="length"></param>
            <param name="read"></param>
        </member>
        <member name="M:YeloDebug.Xbox.WriteFilePartial(System.String,System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            Dont use this, higher-level methods are available.  Use FileStream instead.
            </summary>
            <param name="name"></param>
            <param name="offset"></param>
            <param name="buffer"></param>
            <param name="length"></param>
        </member>
        <member name="M:YeloDebug.Xbox.GetDriveInformation(YeloDebug.Drive,System.UInt64@,System.UInt64@,System.UInt64@)">
            <summary>
            Dont use this, higher-level methods are available.  Use GetDriveFreeSpace or GetDriveSize instead.
            </summary>
            <param name="drive"></param>
            <param name="freeBytes"></param>
            <param name="driveSize"></param>
            <param name="totalFreeBytes"></param>
        </member>
        <member name="M:YeloDebug.Xbox.GetDriveFreeSpace(YeloDebug.Drive)">
            <summary>
            Retrieves xbox drive freespace.
            </summary>
            <param name="drive">Drive name.</param>
            <returns>Free space available.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetDriveSize(YeloDebug.Drive)">
            <summary>
            Retrieves xbox drive size.
            </summary>
            <param name="drive">Drive name.</param>
            <returns>Total space available.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetFileAccessCount">
            <summary>
            Gets the current file access count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetPartitions">
            <summary>
            Gets a list of partitions on the xbox hard drive.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.GetDirectoryList(System.String)">
            <summary>
            Retrieves files that belong to a given directory.
            </summary>
            <param name="name">Directory name.</param>
            <returns>List of files.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.CreateDirectory(System.String)">
            <summary>
            Creates a directory on the xbox.
            </summary>
            <param name="name">Directory name.</param>
        </member>
        <member name="M:YeloDebug.Xbox.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory on the xbox.
            </summary>
            <param name="name">Directory name.</param>
        </member>
        <member name="M:YeloDebug.Xbox.FileExists(System.String)">
            <summary>
            Determines if the given file exists.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.SendFile(System.String,System.String)">
            <summary>
            Sends a file to the xbox.
            </summary>
            <param name="localName">PC file name.</param>
            <param name="remoteName">Xbox file name.</param>
        </member>
        <member name="M:YeloDebug.Xbox.ReceiveFile(System.String,System.String)">
            <summary>
            Receives a file from the xbox.
            </summary>
            <param name="localName">PC file name.</param>
            <param name="remoteName">Xbox file name.</param>
        </member>
        <member name="M:YeloDebug.Xbox.RenameFile(System.String,System.String)">
            <summary>
            Renames or moves a file on the xbox.
            </summary>
            <param name="oldFileName">Old file name.</param>
            <param name="newFileName">New file name.</param>
        </member>
        <member name="M:YeloDebug.Xbox.CreateFile(System.String,System.IO.FileMode)">
            <summary>
            Creates a file on the xbox.
            </summary>
            <param name="fileName">File to create.</param>
            <param name="createDisposition">Creation options.</param>
        </member>
        <member name="M:YeloDebug.Xbox.DeleteFile(System.String)">
            <summary>
            Deletes a file on the xbox.
            </summary>
            <param name="fileName">File to delete.</param>
        </member>
        <member name="M:YeloDebug.Xbox.SetFileSize(System.String,System.Int32)">
            <summary>
            Sets the size of a specified file on the xbox.  This method will not zero out any extra bytes that may have been created.
            </summary>
            <param name="fileName"></param>
            <param name="size"></param>
        </member>
        <member name="M:YeloDebug.Xbox.SetFileInformation(System.String,YeloDebug.FileInformation)">
            <summary>
            Modifies file creation information.  If you wish to specify a new file size, use SetFileSize instead.
            </summary>
            <param name="fileName">File name.</param>
            <param name="info">File information.</param>
        </member>
        <member name="M:YeloDebug.Xbox.GetFileInformation(System.String)">
            <summary>
            Retrieves file information.
            </summary>
            <param name="fileName">File name.</param>
            <returns>File information.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetFileAttributes(System.String)">
            <summary>
            Retrieves file attributes.
            </summary>
            <param name="fileName">File name.</param>
            <returns>File attributes.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.SetFileAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets file attributes.
            </summary>
            <param name="fileName">File name.</param>
            <returns>File attributes.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetFileSize(System.String)">
            <summary>
            Retrieves file size.
            </summary>
            <param name="fileName">File name.</param>
            <returns>File size.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.MountDevice(YeloDebug.Device,YeloDebug.Drive)">
            <summary>
            Mounts the specified device to the specified drive letter.
            </summary>
            <param name="device">Device name</param>
            <param name="drive">Drive letter</param>
        </member>
        <member name="M:YeloDebug.Xbox.UnMountDevice(YeloDebug.Drive)">
            <summary>
            Unmounts the specified drive.
            </summary>
            <param name="drive">Drive letter.</param>
        </member>
        <member name="T:YeloDebug.Xbox.MemoryStream">
            <summary>
            Creates a standard xbox memory stream.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.MemoryStream.#ctor(YeloDebug.Xbox)">
            <summary>
            Creates a new memory stream using a client connection to a debug xbox.
            </summary>
            <param name="client">Connection to use.</param>
        </member>
        <member name="F:YeloDebug.Xbox.memoryStream">
            <summary>
            Xbox memory stream.
            </summary>
        </member>
        <member name="F:YeloDebug.Xbox.memoryReader">
            <summary>
            Xbox memory stream reader.
            </summary>
        </member>
        <member name="F:YeloDebug.Xbox.memoryWriter">
            <summary>
            Xbox memory stream writer.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.Getmem(System.UInt32,System.Int32,System.Byte[]@,System.Int32,System.Int32@)">
            <summary>
            Dont use this, higher-level methods are available.  Use MemoryReader instead.
            </summary>
            <param name="address"></param>
            <param name="length"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="read"></param>
        </member>
        <member name="M:YeloDebug.Xbox.Setmem(System.Int32,System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            Dont use this, higher-level methods are available.  Use MemoryWriter instead.
            Writes to xbox memory. Performance of ~10MB/s due to a simple xbdm.dll modification.
            </summary>
            <param name="address"></param>
            <param name="length"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
        </member>
        <member name="M:YeloDebug.Xbox.GetMemoryChecksum(System.Int32,System.Int32)">
            <summary>
            Calculates the checksum of a block of memory on the xbox.
            </summary>
            <param name="address">Memory address on the Xbox console of the first byte of memory in the block. This address must be aligned on an 8-byte boundary, and it cannot point to code.</param>
            <param name="length">Number of bytes on which to perform the checksum. This value must be a multiple of 8.</param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.DumpMemory">
            <summary>
            A complete dump of xbox memory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetMemory(System.UInt32,System.TypeCode)">
            <summary>
            Retrieves an object from xbox memory.
            </summary>
            <param name="address">Memory location.</param>
            <param name="dataType">Object type.</param>
            <returns>Received object.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetMemory(System.UInt32,System.UInt32)">
            <summary>
            Retrieves data from xbox memory.
            </summary>
            <param name="address">Memory location.</param>
            <param name="length">Length of data to receive.</param>
            <returns>Received data.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetByte(System.UInt32)">
            <summary>
            Retrieves byte from xbox memory.
            </summary>
            <param name="address">Memory location.</param>
            <returns>Received byte.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetInt16(System.UInt32)">
            <summary>
            Retrieves Int16 from xbox memory.
            </summary>
            <param name="address">Memory location.</param>
            <returns>Received Int16.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetUInt16(System.UInt32)">
            <summary>
            Retrieves UInt16 from xbox memory.
            </summary>
            <param name="address">Memory location.</param>
            <returns>Received UInt16.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetInt32(System.UInt32)">
            <summary>
            Retrieves Int32 from xbox memory.
            </summary>
            <param name="address">Memory location.</param>
            <returns>Received Int32.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetUInt32(System.UInt32)">
            <summary>
            Retrieves UInt32 from xbox memory.
            </summary>
            <param name="address">Memory location.</param>
            <returns>Received UInt32.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetInt64(System.UInt32)">
            <summary>
            Retrieves Int64 from xbox memory.
            </summary>
            <param name="address">Memory location.</param>
            <returns>Received Int64.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetUInt64(System.UInt32)">
            <summary>
            Retrieves UInt64 from xbox memory.
            </summary>
            <param name="address">Memory location.</param>
            <returns>Received UInt64.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetSingle(System.UInt32)">
            <summary>
            Retrieves Single from xbox memory.
            </summary>
            <param name="address">Memory location.</param>
            <returns>Received Single.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetDouble(System.UInt32)">
            <summary>
            Retrieves Double from xbox memory.
            </summary>
            <param name="address">Memory location.</param>
            <returns>Received Double.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetString(System.UInt32)">
            <summary>
            Retrieves a string from xbox memory.  Will automatically detect ascii or unicode strings of size greater than 1 char and retrieve as ascii.
            Maximum string size of 512 characters.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetString(System.UInt32,System.UInt32)">
            <summary>
            Retrieves a string of specified length from xbox memory.
            </summary>
            <param name="address"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetASCIIString(System.UInt32)">
            <summary>
            Retrieves a null-terminated ascii string from xbox memory.
            Maximum length of 512 characters.
            </summary>
            <param name="address">Memory location.</param>
            <returns>Received ascii string.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetUnicodeString(System.UInt32)">
            <summary>
            Retrieves a null-terminated unicode string from xbox memory.
            Maximum length of 512 characters.
            </summary>
            <param name="address">Memory location.</param>
            <returns>Received unicode string.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.IsValidAddress(System.UInt32)">
            <summary>
            Determines whether or not the specified address exists in xbox memory.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.IsValidAddressRange(System.UInt32,System.Int32)">
            <summary>
            Checks for a valid address range.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.SetMemory(System.UInt32,System.Object[])">
            <summary>
            Writes object(s) to a specified xbox memory location.
            </summary>
            <param name="address">Xbox memory location.</param>
            <param name="data">Data to write. Specify multiple data 
            instances whenever you have multiple contiguous writes
            since this function will combine multiple data internally
            and then send all at once.</param>
        </member>
        <member name="M:YeloDebug.Xbox.StopOn(YeloDebug.StopOnFlags)">
            <summary>
            Some debugging events require title execution to be suspended.
            But there are some debugging events where thread suspension is an option.
            For these events, you can elect to have the debugging subsystem suspend title execution by calling this function.
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:YeloDebug.Xbox.ClearAllBreakpoints">
            <summary>
            Removes all breakpoints in an xbox title.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.SetBreakPoint(System.UInt32,System.UInt32,YeloDebug.BreakpointType)">
            <summary>
            Sets a hardware breakpoint that suspends title execution when a particular section of memory is referenced.
            </summary>
            <param name="address">Address of the memory to watch.</param>
            <param name="size">The size, in bytes, of the memory to be watched.
            The only allowable values for this parameter are 1, 2, and 4.</param>
            <param name="type">Type of access to watch for.</param>
        </member>
        <member name="M:YeloDebug.Xbox.SetBreakPoint(System.UInt32)">
            <summary>
            Sets a breakpoint in an xbox title.
            </summary>
            <param name="address">Address where you would like to set a breakpoint.</param>
        </member>
        <member name="M:YeloDebug.Xbox.RemoveBreakPoint(System.UInt32)">
            <summary>
            Removes a breakpoint in an xbox title.
            </summary>
            <param name="address">Address where you would like to remove a breakpoint.</param>
        </member>
        <member name="M:YeloDebug.Xbox.HaltThread(System.UInt32)">
            <summary>
            Sends a request to the xbox that the specified thread break as soon as possible.
            </summary>
            <param name="thread">ID of the thread to be halted. Send 0 as the thread ID to have the debugging subsystem select a thread to break into.</param>
        </member>
        <member name="M:YeloDebug.Xbox.ContinueThread(System.UInt32)">
            <summary>
            Resumes the execution of an xbox thread that has been stopped.
            </summary>
            <param name="thread">Thread ID.</param>
        </member>
        <member name="M:YeloDebug.Xbox.ContinueAllThreads">
            <summary>
            Resumes the execution of all xbox threads that have been stopped.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.SuspendThread(System.UInt32)">
            <summary>
            Suspends a given xbox thread.
            </summary>
            <param name="thread">ID of the thread to suspend.</param>
        </member>
        <member name="M:YeloDebug.Xbox.ResumeThread(System.UInt32)">
            <summary>
            Resumes a given xbox thread.
            </summary>
            <param name="thread">ID of the thread to resume.</param>
        </member>
        <member name="M:YeloDebug.Xbox.IsThreadStopped(System.UInt32)">
            <summary>
            Determines whether the specified thread is stopped.
            </summary>
            <param name="thread"></param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetThreadStopInfo(System.UInt32)">
            <summary>
            If the specified thread is stopped this will return information about the circumstances that forced the thread to stop.
            </summary>
            <param name="thread"></param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.Pause">
            <summary>
            Suspends all xbox title threads.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.Continue">
            <summary>
            Resumes all xbox title threads.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.SynchronizeTime">
            <summary>
            Synchronizes the xbox system time with the computer's current time.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.RawFramebufferDump(System.Int32,System.Int32,System.Int32)">
            <summary>
            Use this if the Screenshot function doesnt dump properly and you wish to add a new format.
            Framebuffer will be in a swizzled format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.Screenshot">
            <summary>
            Takes a screenshot of the xbox display.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.StreamTest">
            <summary>
            Benchmark utility function best when ran with xdk dash.  Lower memory situations will yeild lower speeds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.CyclePower">
            <summary>
            Shuts down the xbox console and then turns it on again.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.Reset">
            <summary>
            Resets the xbox console.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.Shutdown">
            <summary>
            Shuts down the xbox console.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.DisableDVDEjectReset">
            <summary>
            Disables reset on DVD tray eject.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.EnableDVDEjectReset">
            <summary>
            Enables reset on DVD tray eject.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.EjectTray">
            <summary>
            Ejects xbox tray.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.LoadTray">
            <summary>
            Loads xbox tray.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.SetLEDState(YeloDebug.LEDState,YeloDebug.LEDState,YeloDebug.LEDState,YeloDebug.LEDState)">
            <summary>
            Sets the xbox LED state.
            </summary>
            <param name="state1">First LED state.</param>
            <param name="state2">Second LED state.</param>
            <param name="state3">Third LED state.</param>
            <param name="state4">Fourth LED state.</param>
        </member>
        <member name="M:YeloDebug.Xbox.RestoreDefaultLEDState">
            <summary>
            Restores the xbox LED to its default state.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.GetVideoFlags">
            <summary>
            Gets the xbox video flags.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetVideoStandard">
            <summary>
            Gets the xbox video standard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.ReadEEPROM">
            <summary>
            Reads the xbox EEPROM.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.ChangeScriptBufferSize(System.UInt32)">
            <summary>
            Changes the script buffer size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:YeloDebug.Xbox.CallAddress(System.UInt32,System.Boolean)">
            <summary>
            Simple function call with optional return value.  Average execution time of 1.3 ms without return or 1.75ms with return.
            </summary>
            <param name="address">Xbox procedure address.</param>
            <returns></returns>
            <remarks>0x10000 is reserved for function use.</remarks>
        </member>
        <member name="M:YeloDebug.Xbox.CallAddressEx(System.UInt32,YeloDebug.CPUContext,System.Boolean,System.Object[])">
            <summary>
            Extended function call with optional context, arguments, and return value.  Average execution time of 1.3ms without return or 1.75ms with return.
            </summary>
            <param name="address">Xbox procedure address.</param>
            <param name="context">Cpu context.  This parameter may be null.</param>
            <param name="pushArgs">Arguments to be pushed before the call is made.  These are optional of course.</param>
            <returns></returns>
        </member>
        <member name="F:YeloDebug.Xbox.AllocationTable">
            <summary>
            Keeps track of all the memory YeloDebug uses.
            </summary>
        </member>
        <member name="F:YeloDebug.Xbox.BlockAllocationTableSync">
            <summary>
            Prevents YeloDebug from syncing its allocation table with the xbox.
            This is usefull if you are confident that you wont lose your connection,
            then you can unblock when you wish to manually sync again.  Otherwise, YeloDebug 
            will sync after each memory allocation or release.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.AllocationTableSyncing">
            <summary>
            Gets or sets whether or not allocation table will be kept in sync with the xbox.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.LoadAllocationTable">
            <summary>
            Reads the allocation table from the xbox.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.SyncAllocationTable">
            <summary>
            Syncs the allocation table with the xbox.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.RemoveAllocationEntry(System.UInt32)">
            <summary>
            Removes an entry from the allocation table.
            </summary>
            <param name="address"></param>
            <returns>Allocation size.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.AssertAllocationExists(System.UInt32)">
            <summary>
            Makes sure the given allocation exists.
            </summary>
            <param name="address"></param>
            <returns>Allocation table index.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.AssertAllocationNonexistant(System.UInt32)">
            <summary>
            Makes sure the given allocation does not exist.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetAllocationType(System.UInt32)">
            <summary>
            Determines a given allocations type.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.AllocateMemory(System.UInt32)">
            <summary>
            Allocates memory on the xbox.
            </summary>
            <param name="size"></param>
            <returns>Allocated address.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.AllocateMemory(YeloDebug.AllocationType,System.UInt32)">
            <summary>
            Allocates memory of specified type on the xbox.
            </summary>
            <param name="type"></param>
            <param name="size"></param>
            <returns>Allocated address.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.FreeMemory(System.UInt32)">
            <summary>
            Frees xbox memory.
            </summary>
            <param name="address"></param>
            <returns>Size of freed memory.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.FreeAllMemory">
            <summary>
            Frees all memory associated with the current allocation table.
            </summary>
            <returns>Total memory freed.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.IsEnoughMemory(System.UInt32)">
            <summary>
            Determines if the requested size of memory can be allocated.  This function will also borrow from the file cache to meet the requested size if needed.
            </summary>
            <param name="requestedSize"></param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.AlignmentCheck(System.UInt32)">
            <summary>
            Makes sure size is aligned to specs.  Unaligned sizes will be rounded up to the next 4kb page boundary.
            </summary>
            <param name="size"></param>
            <returns>Aligned size.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.AllocateDebugMemory(System.UInt32)">
            <summary>
            Allocates debug memory on the xbox. Address space of 0xB0000000 to 0xC0000000.
            </summary>
            <param name="size">Size of memory to be allocated.  Note that an unaligned size will be rounded up to the next 4kb page boundary.</param>
            <returns>Address of allocated memory.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.FreeDebugMemory(System.UInt32)">
            <summary>
            Frees debug memory on the xbox.
            </summary>
            <param name="address">Memory address.</param>
            <returns>Size of freed memory.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.AllocatePhysicalMemory(System.UInt32)">
            <summary>
            Allocates physical memory on the xbox.  Address space of 0x80000000 to 0x84000000.  Extends to 0x88000000 on a developer kit.
            </summary>
            <param name="size">Size of memory to be allocated.  Note that an unaligned size will be rounded up to the next 4kb page boundary.</param>
            <returns>Address of allocated memory.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.AllocatePhysicalMemoryEx(System.UInt32,YeloDebug.AddressRange)">
            <summary>
            Allocates physical memory on the xbox.  Input range of 0x0 - 0x4000000.  Xbox address space of 0x80000000 to 0x84000000.  Extends to 0x88000000 on a developer kit.
            </summary>
            <param name="size">Size of memory to be allocated.  Note that an unaligned size will be rounded up to the next 4kb page boundary.</param>
            <param name="range">Range of memory to place allocation.</param>
            <returns>Address of allocated memory.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.FreePhysicalMemory(System.UInt32)">
            <summary>
            Frees physical memory on the xbox.
            </summary>
            <param name="address">Memory address.</param>
            <returns>Size of freed memory.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.AllocateVirtualMemory(System.UInt32)">
            <summary>
            Allocates virtual memory on the xbox.  Address space of 0x00000000 to 0x80000000.
            </summary>
            <param name="size">Size of memory to be allocated.  Note that an unaligned size will be rounded up to the next 4kb page boundary.</param>
            <returns>Address of allocated memory.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.AllocateVirtualMemoryEx(System.UInt32,System.UInt32)">
            <summary>
            Allocates virtual memory on the xbox.  Address space of 0x00000000 to 0x80000000.
            </summary>
            <param name="size">Size of memory to be allocated.  Note that an unaligned size will be rounded up to the next 4kb page boundary.</param>
            <param name="address">Preferred address.</param>
            <returns>Address of allocated memory.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.FreeVirtualMemory(System.UInt32)">
            <summary>
            Frees virtual memory on the xbox.
            </summary>
            <param name="address">Memory address.</param>
            <returns>Size of freed memory.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.AllocateSystemMemory(System.UInt32)">
            <summary>
            Allocates system memory on the xbox.  Address space of 0xD0000000 to 0xFFFFFFFC.
            </summary>
            <param name="size">Size of memory to be allocated.  Note that an unaligned size will be rounded up to the next 4kb page boundary.</param>
            <returns>Address of allocated memory.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.FreeSystemMemory(System.UInt32)">
            <summary>
            Frees system memory on the xbox.
            </summary>
            <param name="address">Memory address.</param>
            <returns>Size of freed memory.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.GetFileCacheSize">
            <summary>
            Retrieves the file cache size associated with the current title.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.SetFileCacheSize(System.UInt32)">
            <summary>
            Allows us to borrow extra memory from the file cache :)
            </summary>
            <param name="size">Page count.</param>
            <returns></returns>
        </member>
        <member name="P:YeloDebug.Xbox.ScratchBuffer">
            <summary>
            Gets the address of the buffer automatically allocated for temporary storage in xbox memory.
            </summary>
        </member>
        <member name="P:YeloDebug.Xbox.ScratchBufferSize">
            <summary>
            Gets the size of the temporary buffer allocated on the xbox.
            </summary>
        </member>
        <member name="T:YeloDebug.Xbox.History">
            <summary>
            Keeps track of history addresses
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.InitializeHistory">
            <summary>
            Initializes the history page.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.AllocateHistoryPages(System.UInt32)">
            <summary>
            Use in beginning when setting up our history page, since calladdressex will depend on that memory
            </summary>
            <param name="size"></param>
            <returns>Allocated address.</returns>
        </member>
        <member name="M:YeloDebug.Xbox.XInputGetStateAddress">
            <summary>
            Searches xbox memory for XInputGetState(). Average execution time of 15ms.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.StateChanged(YeloDebug.InputState,YeloDebug.InputState)">
            <summary>
            Compares the differences between two states and determines if they have changed.
            </summary>
            <param name="oldState"></param>
            <param name="newState"></param>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.IsGamepadHooked">
            <summary>
            Detects whether or not we have already hooked into XInputGetState().
            </summary>
            <returns></returns>
        </member>
        <member name="M:YeloDebug.Xbox.InitializeControllerHook">
            <summary>
            Hooks into the XInputGetState procedure on your xbox, and hijacks controller input.
            </summary>
        </member>
        <member name="M:YeloDebug.Xbox.ManuallyInitializeControllerHook(System.UInt32)">
            <summary>
            This is to be used if YeloDebug cannot automatically detect the XInputGetState function address.
            Then you will need to specify your own if you wish to hook into the controllers.
            This function has not been tested since I have not found a game which doesn't use the standard XInputGetState function.
            </summary>
            <param name="xinputAddress"></param>
        </member>
        <member name="M:YeloDebug.Xbox.OverrideControllers(System.Boolean)">
            <summary>
            Specifies if the xbox should override controller input and start listening for pc input.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:YeloDebug.Xbox.SetGamepadState(System.UInt32,YeloDebug.InputState)">
            <summary>
            Sends gamepad input to a specified controller port.  
            A controller must be plugged into the port for this to work.
            You are also responsible for the polling frequency.
            </summary>
            <param name="port">Controller port. [0-3]</param>
            <param name="input">Gamepad input.</param>
        </member>
        <member name="T:YeloDebug.XboxKernel">
            <summary>
            Xbox kernel information.
            </summary>
        </member>
        <member name="F:YeloDebug.XboxKernel.MmDbgFreeMemory">
            <summary>
            Returns number of pages released.
            </summary>
        </member>
        <member name="M:YeloDebug.XboxKernel.#ctor(YeloDebug.Xbox)">
            <summary>
            Contains everything needed to communicate with the Xbox kernel.
            </summary>
            <param name="xbox">Connection to use.</param>
        </member>
        <member name="M:YeloDebug.XboxKernel.SaveAsFile">
            <summary>
            Saves xbox kernel as local file on pc.
            </summary>
        </member>
        <member name="M:YeloDebug.XboxKernel.GetExportTable">
            <summary>
            Retrieves kernel export table.
            </summary>
            <returns>Kernel export table.</returns>
        </member>
        <member name="M:YeloDebug.XboxKernel.InitializeKernelExports">
            <summary>
            Initializes kernel exports with actual addresses.
            </summary>
        </member>
    </members>
</doc>
